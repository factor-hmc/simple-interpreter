// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Block = require("bs-platform/lib/js/block.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Caml_int32 = require("bs-platform/lib/js/caml_int32.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Lang$FactorInterpreter = require("./Lang.bs.js");

function $$eval(stack, word) {
  if (typeof word === "number") {
    switch (word) {
      case /* Add */0 :
          if (stack) {
            var match = stack[0];
            if (typeof match === "number" || match.tag) {
              Lang$FactorInterpreter.print_stack(stack);
              return Pervasives.failwith("improper stack contents");
            } else {
              var match$1 = stack[1];
              if (match$1) {
                var match$2 = match$1[0];
                if (typeof match$2 === "number" || match$2.tag) {
                  Lang$FactorInterpreter.print_stack(stack);
                  return Pervasives.failwith("improper stack contents");
                } else {
                  return /* :: */[
                          /* Int */Block.__(0, [match$2[0] + match[0] | 0]),
                          match$1[1]
                        ];
                }
              } else {
                Lang$FactorInterpreter.print_stack(stack);
                return Pervasives.failwith("improper stack contents");
              }
            }
          } else {
            Lang$FactorInterpreter.print_stack(stack);
            return Pervasives.failwith("improper stack contents");
          }
      case /* Sub */1 :
          if (stack) {
            var match$3 = stack[0];
            if (typeof match$3 === "number" || match$3.tag) {
              Lang$FactorInterpreter.print_stack(stack);
              return Pervasives.failwith("improper stack contents");
            } else {
              var match$4 = stack[1];
              if (match$4) {
                var match$5 = match$4[0];
                if (typeof match$5 === "number" || match$5.tag) {
                  Lang$FactorInterpreter.print_stack(stack);
                  return Pervasives.failwith("improper stack contents");
                } else {
                  return /* :: */[
                          /* Int */Block.__(0, [match$5[0] - match$3[0] | 0]),
                          match$4[1]
                        ];
                }
              } else {
                Lang$FactorInterpreter.print_stack(stack);
                return Pervasives.failwith("improper stack contents");
              }
            }
          } else {
            Lang$FactorInterpreter.print_stack(stack);
            return Pervasives.failwith("improper stack contents");
          }
      case /* Mul */2 :
          if (stack) {
            var match$6 = stack[0];
            if (typeof match$6 === "number" || match$6.tag) {
              Lang$FactorInterpreter.print_stack(stack);
              return Pervasives.failwith("improper stack contents");
            } else {
              var match$7 = stack[1];
              if (match$7) {
                var match$8 = match$7[0];
                if (typeof match$8 === "number" || match$8.tag) {
                  Lang$FactorInterpreter.print_stack(stack);
                  return Pervasives.failwith("improper stack contents");
                } else {
                  return /* :: */[
                          /* Int */Block.__(0, [Caml_int32.imul(match$8[0], match$6[0])]),
                          match$7[1]
                        ];
                }
              } else {
                Lang$FactorInterpreter.print_stack(stack);
                return Pervasives.failwith("improper stack contents");
              }
            }
          } else {
            Lang$FactorInterpreter.print_stack(stack);
            return Pervasives.failwith("improper stack contents");
          }
      case /* Div */3 :
          if (stack) {
            var match$9 = stack[0];
            if (typeof match$9 === "number" || match$9.tag) {
              Lang$FactorInterpreter.print_stack(stack);
              return Pervasives.failwith("improper stack contents");
            } else {
              var match$10 = stack[1];
              if (match$10) {
                var match$11 = match$10[0];
                if (typeof match$11 === "number" || match$11.tag) {
                  Lang$FactorInterpreter.print_stack(stack);
                  return Pervasives.failwith("improper stack contents");
                } else {
                  return /* :: */[
                          /* Int */Block.__(0, [Caml_int32.div(match$11[0], match$9[0])]),
                          match$10[1]
                        ];
                }
              } else {
                Lang$FactorInterpreter.print_stack(stack);
                return Pervasives.failwith("improper stack contents");
              }
            }
          } else {
            Lang$FactorInterpreter.print_stack(stack);
            return Pervasives.failwith("improper stack contents");
          }
      case /* Eq */4 :
          if (stack) {
            var match$12 = stack[1];
            if (match$12) {
              var match$13 = Caml_obj.caml_equal(stack[0], match$12[0]);
              return /* :: */[
                      match$13 ? /* True */0 : /* False */1,
                      match$12[1]
                    ];
            } else {
              Lang$FactorInterpreter.print_stack(stack);
              return Pervasives.failwith("improper stack contents");
            }
          } else {
            Lang$FactorInterpreter.print_stack(stack);
            return Pervasives.failwith("improper stack contents");
          }
      case /* If */5 :
          if (stack) {
            var match$14 = stack[0];
            if (typeof match$14 === "number" || match$14.tag !== /* Quotation */3) {
              Lang$FactorInterpreter.print_stack(stack);
              return Pervasives.failwith("improper stack contents");
            } else {
              var match$15 = stack[1];
              if (match$15) {
                var match$16 = match$15[0];
                if (typeof match$16 === "number" || match$16.tag !== /* Quotation */3) {
                  Lang$FactorInterpreter.print_stack(stack);
                  return Pervasives.failwith("improper stack contents");
                } else {
                  var match$17 = match$15[1];
                  if (match$17) {
                    var st = match$17[1];
                    var match$18 = Lang$FactorInterpreter.to_bool(match$17[0]);
                    if (match$18) {
                      return List.fold_left($$eval, st, match$16[0]);
                    } else {
                      return List.fold_left($$eval, st, match$14[0]);
                    }
                  } else {
                    Lang$FactorInterpreter.print_stack(stack);
                    return Pervasives.failwith("improper stack contents");
                  }
                }
              } else {
                Lang$FactorInterpreter.print_stack(stack);
                return Pervasives.failwith("improper stack contents");
              }
            }
          } else {
            Lang$FactorInterpreter.print_stack(stack);
            return Pervasives.failwith("improper stack contents");
          }
      case /* Dup */6 :
          if (stack) {
            var x = stack[0];
            return /* :: */[
                    x,
                    /* :: */[
                      x,
                      stack[1]
                    ]
                  ];
          } else {
            Lang$FactorInterpreter.print_stack(stack);
            return Pervasives.failwith("improper stack contents");
          }
      case /* Swap */7 :
          if (stack) {
            var match$19 = stack[1];
            if (match$19) {
              return /* :: */[
                      match$19[0],
                      /* :: */[
                        stack[0],
                        match$19[1]
                      ]
                    ];
            } else {
              Lang$FactorInterpreter.print_stack(stack);
              return Pervasives.failwith("improper stack contents");
            }
          } else {
            Lang$FactorInterpreter.print_stack(stack);
            return Pervasives.failwith("improper stack contents");
          }
      case /* Rot */8 :
          if (stack) {
            var match$20 = stack[1];
            if (match$20) {
              var match$21 = match$20[1];
              if (match$21) {
                return /* :: */[
                        match$21[0],
                        /* :: */[
                          stack[0],
                          /* :: */[
                            match$20[0],
                            match$21[1]
                          ]
                        ]
                      ];
              } else {
                Lang$FactorInterpreter.print_stack(stack);
                return Pervasives.failwith("improper stack contents");
              }
            } else {
              Lang$FactorInterpreter.print_stack(stack);
              return Pervasives.failwith("improper stack contents");
            }
          } else {
            Lang$FactorInterpreter.print_stack(stack);
            return Pervasives.failwith("improper stack contents");
          }
      case /* Drop */9 :
          if (stack) {
            return stack[1];
          } else {
            Lang$FactorInterpreter.print_stack(stack);
            return Pervasives.failwith("improper stack contents");
          }
      case /* While */10 :
          if (stack) {
            var match$22 = stack[0];
            if (typeof match$22 === "number" || match$22.tag !== /* Quotation */3) {
              Lang$FactorInterpreter.print_stack(stack);
              return Pervasives.failwith("improper stack contents");
            } else {
              var match$23 = stack[1];
              if (match$23) {
                var match$24 = match$23[0];
                if (typeof match$24 === "number" || match$24.tag !== /* Quotation */3) {
                  Lang$FactorInterpreter.print_stack(stack);
                  return Pervasives.failwith("improper stack contents");
                } else {
                  return eval_while(match$23[1], match$22[0], match$24[0]);
                }
              } else {
                Lang$FactorInterpreter.print_stack(stack);
                return Pervasives.failwith("improper stack contents");
              }
            }
          } else {
            Lang$FactorInterpreter.print_stack(stack);
            return Pervasives.failwith("improper stack contents");
          }
      
    }
  } else {
    return /* :: */[
            word[0],
            stack
          ];
  }
}

function eval_while(_stack, body, pred) {
  while(true) {
    var stack = _stack;
    var match = List.fold_left($$eval, stack, pred);
    if (match) {
      var st = match[1];
      var match$1 = Lang$FactorInterpreter.to_bool(match[0]);
      if (match$1) {
        _stack = List.fold_left($$eval, st, body);
        continue ;
      } else {
        return st;
      }
    } else {
      return Pervasives.failwith("eval_while empty stack");
    }
  };
}

function eval_words(stack, words) {
  return List.fold_left($$eval, stack, words);
}

exports.$$eval = $$eval;
exports.eval_words = eval_words;
exports.eval_while = eval_while;
/* No side effect */
